# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to deploy Redshift ETL automation with DBT'

Parameters:
  SubnetId1:
    Type: AWS::EC2::Subnet::Id
    Description: The AWS Subnet to place ECS resources into for batch.
  MonitoringEmail:
    Type: String
    Default: ''
    Description: Email address that will receive monitoring alerts
  JobFrequency:
    Type: String
    Default: 0 4 * * ? *
    Description: Frequency of the DBT job in CRON format. Time will be in UTC timezone. For example, "0 4 * * ? *" (without quotes) will run the job everyday at 4:00 UTC.

Resources:

  # AWS BATCH
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for instances launched in the VPC by Batch
    
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EcsInstanceRole

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonAthenaFullAccess

  BatchProcessingJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: 'BatchJobDefinition'
      ContainerProperties:
        Image:
          Fn::Join:
            - ''
            - - Ref: AWS::AccountId
              - .dkr.ecr.
              - Ref: AWS::Region
              - ".amazonaws.com/dbt-batch-processing-job-repository:latest"
        Vcpus: 2
        Memory: 2000
        Command:
          - dbt
          - run
          - --profiles-dir
          - .
      RetryStrategy:
        Attempts: 1

  BatchProcessingJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: 'BatchProcessingJobQueue'
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ComputeEnvironment

  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ServiceRole: !Ref BatchServiceRole
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 6
        InstanceTypes:
          - optimal
        Subnets:
          - Ref: SubnetId1
        SecurityGroupIds:
          - Ref: SecurityGroup
        InstanceRole:
          Ref: IamInstanceProfile

  ### Email notification
  AWSBatchEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Events Rule for AWS Batch
      EventPattern:
        source:
          - aws.batch
        detail-type:
          - Batch Job State Change
        detail:
          status:
            - "FAILED"
      State: ENABLED
      Targets:
        - Arn:
            Ref: ErrorsTopic
          Id: cloudwatch-batch-eventrules
          InputTransformer:
            InputPathsMap:
              logStream: "$.detail.container.logStreamName"
              time: "$.time"
            InputTemplate: "\"Your ETL Batch job has failed at <time>. Please check the logs at https://console.aws.amazon.com/cloudwatch/home?#logEventViewer:group=/aws/batch/job;stream=<logStream> (ensure you are logged into the correct AWS account before clicking the link).\""

  ErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Ref: MonitoringEmail
          Protocol: "email"
      TopicName: 'BatchProcessingErrorsTopic'

  ErrorsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: '*'
      Topics:
        - !Ref ErrorsTopic

  #CronJob as EventRule to invoke AWS batch
  CronjobEvent:
    Type: "AWS::Events::Rule"
    Properties:
      Description: 'CloudWatch Event that triggers AWS BATCH'
      ScheduleExpression: !Sub cron(${JobFrequency}) #Run at 1 pm UTC every 2,9,16,23 days of the month
      State: ENABLED
      RoleArn: !GetAtt CloudWatchRole.Arn
      Targets:
        - Arn: !Ref BatchProcessingJobQueue
          Id: AWSBatchCronjob
          RoleArn: !GetAtt CloudWatchRole.Arn
          BatchParameters:
              JobDefinition: !Ref BatchProcessingJobDefinition
              JobName: 'redshift-etl-job'

  #Permission to CWEvents invoke the AWS batch
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
  
  CloudWatchBatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CloudWatchDbtBatchPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -  
            Effect: Allow
            Action:
              - batch:SubmitJob
            Resource:
              - !Ref BatchProcessingJobDefinition
              - !Ref BatchProcessingJobQueue
      Roles:
        - !Ref CloudWatchRole  

  #ECR Repository
  BatchProcessRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "dbt-batch-processing-job-repository"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${EcsInstanceRole}
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"

